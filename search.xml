<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3学习之路</title>
      <link href="/uncategorized/VueThree/"/>
      <url>/uncategorized/VueThree/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="vue2-x3D-gt-vue3"><a href="#vue2-x3D-gt-vue3" class="headerlink" title="vue2 &#x3D;&gt; vue3"></a>vue2 &#x3D;&gt; vue3</h4><h5 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h5><p> vue2和vue3的初始化就存在着一定区别，比如vue3可以安装脚手架同时提前安装好一些项目开发必备的插件，并且3提供了可视化创建脚手架，可以更加方便地对插件和依赖进行管理和配置，同时两个版本的目录结构也有些许差异。</p><h5 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h5><h6 id="（1）双向绑定"><a href="#（1）双向绑定" class="headerlink" title="（1）双向绑定"></a>（1）双向绑定</h6><p> vue2的双向数据绑定是利用es5的一个API，Object.definePropert()对数据进行劫持结合发布订阅模式的方法实现；<br> vue3中使用了es6的ProxyAPI对数据代理，通过reactive()函数给每一个对象都包一层Proxy，通过Proxy监听属性变化，从而实现对数据的监控。<br> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这⾥是引相⽐于vue2版本，使⽤proxy的优势如下</span></span><br><span class="line"><span class="number">1.</span>defineProperty只能监听某个属性，不能对全对象监听</span><br><span class="line">可以省去<span class="keyword">for</span> <span class="keyword">in</span>、闭包等内容来提升效率（直接绑定整个对象即可）</span><br><span class="line"><span class="number">2.</span>可以监听数组，不⽤再去单独的对数组做特异性操作,通过Proxy可以直接拦截所有对象类型数据的操作，完美⽀持对数组的监听。</span><br><span class="line"> </span><br></pre></td></tr></table></figure></p><h5 id="3-新增内置的组件和方法"><a href="#3-新增内置的组件和方法" class="headerlink" title="3.新增内置的组件和方法"></a>3.新增内置的组件和方法</h5><h6 id="（1）默认进行懒观察"><a href="#（1）默认进行懒观察" class="headerlink" title="（1）默认进行懒观察"></a>（1）默认进行懒观察</h6><p> 使用Function-basedAPI,setup函数，对与插件或对象的一个按需引入，Computed Value，新加入了TypeScript以及PWA的支持等等</p><h6 id="（2）按需引入"><a href="#（2）按需引入" class="headerlink" title="（2）按需引入"></a>（2）按需引入</h6><p> vue2中new出的实例对象，所有的东西都在这个vue对象上，这样其实无论你用到还是没用到，都会跑一遍，这样不仅提高了性能消耗，也无疑新增了用户加载时间。</p><p> 而vue3中可以用ES module imports按需引入，如：keep-alive内置组件、v-model指令，等等。不仅我们开发起来更加的便捷，减少 了内存消耗，也同时减少了⽤户加载时间，优化⽤户体验</p><h6 id="（3）创建项目文件发生的变化"><a href="#（3）创建项目文件发生的变化" class="headerlink" title="（3）创建项目文件发生的变化"></a>（3）创建项目文件发生的变化</h6><p> 在main.js中：<br> <div class="tag-plugin image"><div class="image-bg"><img src="./main.png" fancybox="true"/><a class="image-download blur" style="opacity:0" href="./main.png"><svg class="icon" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3734"><path d="M561.00682908 685.55838913a111.03077546 111.03077546 0 0 1-106.8895062 0L256.23182837 487.72885783a55.96309219 55.96309219 0 0 1 79.13181253-79.18777574L450.70357448 523.88101491V181.55477937a55.96309219 55.96309219 0 0 1 111.92618438 0v344.06109173l117.07478902-117.07478901a55.96309219 55.96309219 0 0 1 79.13181252 79.18777574zM282.81429711 797.1487951h447.70473912a55.96309219 55.96309219 0 0 1 0 111.92618438H282.81429711a55.96309219 55.96309219 0 0 1 0-111.92618438z" p-id="3735"></path></svg></a></div></div><br>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心代码：</span></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>) = createApp(根组件).mount(<span class="string">&#x27;public/index.html中的div容器&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.vue2.0中是直接创建了一个vue实例</span></span><br><span class="line"><span class="comment">//2.vue3.0中按需导出了一个createApp （ceateApp做了什么）</span></span><br><span class="line"><span class="comment">//3.vue3中的app单文件不再强制要求必须有根元素 也就是说 在vue2.0中必须要有一个根元素，在vue3中没这个要求</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></p><h5 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4.生命周期"></a>4.生命周期</h5> <div class="tag-plugin image"><div class="image-bg"><img src="./smzq.png" alt="vue3生命周期" fancybox="true"/><a class="image-download blur" style="opacity:0" href="./smzq.png"><svg class="icon" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3734"><path d="M561.00682908 685.55838913a111.03077546 111.03077546 0 0 1-106.8895062 0L256.23182837 487.72885783a55.96309219 55.96309219 0 0 1 79.13181253-79.18777574L450.70357448 523.88101491V181.55477937a55.96309219 55.96309219 0 0 1 111.92618438 0v344.06109173l117.07478902-117.07478901a55.96309219 55.96309219 0 0 1 79.13181252 79.18777574zM282.81429711 797.1487951h447.70473912a55.96309219 55.96309219 0 0 1 0 111.92618438H282.81429711a55.96309219 55.96309219 0 0 1 0-111.92618438z" p-id="3735"></path></svg></a></div><div class="image-meta"><span class="image-caption center">vue3生命周期</span></div></div><p>vue3 中的生命周期函数, 需要在 setup 中调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; onMounted, onUpdated,onUnmounted &#125; from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent = &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;mounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(() =&gt; &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;updated!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted(() =&gt; &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;unmounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-获取props"><a href="#5-获取props" class="headerlink" title="5.获取props"></a>5.获取props</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue2：console.log(‘props’,<span class="variable language_">this</span>.xxx)</span><br><span class="line">vue3：setup(props,context)&#123; console.log(‘props’,props) &#125;</span><br></pre></td></tr></table></figure><h5 id="6-给父组件传值emit"><a href="#6-给父组件传值emit" class="headerlink" title="6.给父组件传值emit"></a>6.给父组件传值emit</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue2：<span class="variable language_">this</span>.$emit()</span><br><span class="line">vue3：setup(props,context)&#123;context.emit()&#125;</span><br></pre></td></tr></table></figure><h4 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h4><h5 id="vue2-optionsAPI"><a href="#vue2-optionsAPI" class="headerlink" title="vue2-optionsAPI"></a>vue2-optionsAPI</h5><p>1.优点：易于学习和使用，每个代码有着明确的位置(数据放data中，方法放methods中)<br>2.缺点：相似的逻辑，不容易复用，在大项目中尤为明显<br>3.虽然optionsAPI可以通过mixins提取相同的逻辑，但是也并不是特别好维护</p><h5 id="vue3-compositionAPI"><a href="#vue3-compositionAPI" class="headerlink" title="vue3-compositionAPI"></a>vue3-compositionAPI</h5><p>1.compositionAPI是基于逻辑功能组织代码的，一个功能api相关放到一起<br>2.即使项目大了，功能多了，也能快速定位功能相关的api<br>3.大大的提升了代码可读性和可维护性</p><h5 id=""><a href="#" class="headerlink" title=""></a><mark class="tag-plugin mark" color="orange">vue3 推荐使用 composition API, 也保留了options API</mark></h5><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><h6 id="Vue3动机和新特性"><a href="#Vue3动机和新特性" class="headerlink" title="Vue3动机和新特性"></a>Vue3动机和新特性</h6><p class="tag-plugin quot" type="text">Vue3设计理念：组合式API</p><p>动机与目的：<br>1.更好的逻辑复用与代码组织（<mark class="tag-plugin mark" color="purple">composition组合式api</mark>）<br>optionsAPI(旧) &#x3D;&gt; compositionAPI(新)<br>效果：代码组织更方便，逻辑复用更方便，非常利于维护<br>2.更好的类型推导（typescript支持）<br>vue3源码用了ts重写，vue3对ts的支持更友好。(ts可以让代码更加稳定)</p><p class="tag-plugin quot" type="text">Vue3新特性</p><p>1.数据响应式原理重新实现（ES6 <u>proxy</u> 替代了ES5 <u>Object.defineProperty</u>）<br>解决了数组的更新检测等bug，大大优化了响应式监听的性能(原来检测对象属性的变化，需要一个个对属性递归监听)<u>proxy</u>可以直接对整个对象劫持<br>2.虚拟DOM-新算法(更小，更快)<br>3.提供了composition api 可以更加的逻辑复用<br>4.模板可以有多个根元素<br>5.源码用ts重写，废弃了eventbus过滤器</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 扩展 </tag>
            
            <tag> 最新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿造叮咚买菜的时间选择器（伪）</title>
      <link href="/uncategorized/TimeDd/"/>
      <url>/uncategorized/TimeDd/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>##时间选择器</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">calculation(star,interval) </span><br><span class="line"><span class="comment">// 第一个参数是开始的时间，也就是可选的时间的区间开始的时间</span></span><br><span class="line"><span class="comment">// 第二个参数是区间的扩展性，0.5的话是半小时；1的话是一小时，以此类推 (还没做到)</span></span><br><span class="line">timestamp(star,date)</span><br><span class="line"><span class="comment">// 第一个参数是开始的时间戳，</span></span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>父组件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;gotoPopup&quot;</span>&gt;点击&lt;/button&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">gotoPopup()&#123;</span><br><span class="line"><span class="variable language_">this</span>.$refs.insled.show = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;u-popup :show=<span class="string">&quot;show&quot;</span> mode=<span class="string">&quot;bottom&quot;</span> :round=<span class="string">&quot;10&quot;</span> @close=<span class="string">&quot;close&quot;</span> closeable&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;Title&quot;</span>&gt;选择送达时间&lt;/div&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;Time&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;Time_YMD&quot;</span>&gt;</span><br><span class="line">&lt;u-list @scrolltolower=<span class="string">&quot;scrolltolowerYMD&quot;</span> height=<span class="string">&quot;100%&quot;</span>&gt;</span><br><span class="line">&lt;u-list-item&gt;</span><br><span class="line">&lt;p <span class="keyword">class</span>=<span class="string">&quot;YMD_p&quot;</span>&gt;YMDtime&lt;/p&gt;</span><br><span class="line">&lt;/u-list-item&gt;</span><br><span class="line">&lt;/u-list&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;Time_HMS&quot;</span>&gt;</span><br><span class="line">&lt;u-list @scrolltolower=<span class="string">&quot;scrolltolowerHMS&quot;</span> height=<span class="string">&quot;100%&quot;</span>&gt;</span><br><span class="line">&lt;u-list-item v-<span class="keyword">for</span>=<span class="string">&quot;(val ,ind) in timeArray&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;HMS_li&quot;</span> @click=<span class="string">&quot;onHMSLi(val)&quot;</span>&gt;val&lt;/div&gt;</span><br><span class="line">&lt;/u-list-item&gt;</span><br><span class="line">&lt;/u-list&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/u-popup&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">data() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">show: <span class="literal">false</span>,</span><br><span class="line">YMDtime: <span class="string">&quot;&quot;</span>,</span><br><span class="line">timeArray: [],</span><br><span class="line">HMSindex:null,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">scrolltolowerYMD() &#123;&#125;,</span><br><span class="line">scrolltolowerHMS() &#123;&#125;,</span><br><span class="line">calculation(star, interval) &#123;</span><br><span class="line">let Home = star.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">let front = Number(Home)</span><br><span class="line">let after = Number(front) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> (let i = Home; i &lt; <span class="number">24</span>*Number(interval); i++) &#123;</span><br><span class="line"><span class="variable language_">this</span>.timeArray.push(front + <span class="string">&#x27;:00 - &#x27;</span> + after + <span class="string">&#x27;:00&#x27;</span>)</span><br><span class="line">front = front + <span class="number">1</span></span><br><span class="line">after = front + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">timestamp(star, date) &#123;</span><br><span class="line">let newHMS = Number(star) + (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>) * Number(date)</span><br><span class="line">let time = new Date(newHMS)</span><br><span class="line">let Y = time.getFullYear() + <span class="string">&#x27;年&#x27;</span></span><br><span class="line">let M = (time.getMonth() + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + (time.getMonth() + <span class="number">1</span>) : time.getMonth() + <span class="number">1</span>) + <span class="string">&#x27;月&#x27;</span></span><br><span class="line">let D = (time.getDate() &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + time.getDate() : time.getDate()) + <span class="string">&#x27;日&#x27;</span></span><br><span class="line"><span class="keyword">return</span> Y + M + D</span><br><span class="line">&#125;,</span><br><span class="line">onHMSLi(val)&#123;</span><br><span class="line"><span class="variable language_">this</span>.show = <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">close()&#123;</span><br><span class="line"><span class="variable language_">this</span>.show = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">var myDate = new Date();</span><br><span class="line">myDate.getTime();</span><br><span class="line"><span class="variable language_">this</span>.YMDtime = <span class="variable language_">this</span>.timestamp(myDate.getTime(), <span class="number">1</span>)</span><br><span class="line">var mytime = myDate.toLocaleTimeString(); <span class="comment">//获取当前时间</span></span><br><span class="line"><span class="variable language_">this</span>.calculation(<span class="string">&quot;00:00:00&quot;</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span> scoped&gt;</span><br><span class="line">.Title &#123;</span><br><span class="line">text-align: center;</span><br><span class="line">padding: <span class="number">40</span>rpx;</span><br><span class="line">border-bottom: <span class="number">1</span>px solid #f4f4f4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Time &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: space-between;</span><br><span class="line">background-color: #e7e7e7;</span><br><span class="line">.Time_YMD,</span><br><span class="line">.Time_HMS &#123;</span><br><span class="line">height: <span class="number">50</span>vh;</span><br><span class="line">&#125;</span><br><span class="line">.Time_YMD&#123;width: <span class="number">40</span>vw;&#125;</span><br><span class="line">.Time_HMS&#123;width: <span class="number">60</span>vw;&#125;</span><br><span class="line">.YMD_p&#123;</span><br><span class="line">font-size: <span class="number">14</span>px;</span><br><span class="line">background-color: <span class="meta">#fff;</span></span><br><span class="line">padding: <span class="number">15</span>px <span class="number">10</span>px;</span><br><span class="line">text-align: center;</span><br><span class="line">color: #<span class="number">5</span>AAF76;</span><br><span class="line">font-weight: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line">.HMS_li&#123;</span><br><span class="line">font-size: <span class="number">14</span>px;</span><br><span class="line">border-bottom: <span class="number">1</span>px solid <span class="meta">#eaeaea;</span></span><br><span class="line">background-color: <span class="meta">#fff;</span></span><br><span class="line">padding:<span class="number">15</span>px <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 时间选择器 </tag>
            
            <tag> uniapp </tag>
            
            <tag> 插件 </tag>
            
            <tag> uview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原生实现表格模糊查询.....</title>
      <link href="/uncategorized/MoHuChaXun/"/>
      <url>/uncategorized/MoHuChaXun/</url>
      
        <content type="html"><![CDATA[<p>ps:因为不想整理,搬运自<a href="https://blog.csdn.net/weixin_43867847?type=blog">大佬</a>的文章</p><span id="more"></span><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>这里还用到了一个<a href="https://baike.baidu.com/item/RegExp/11017063?fr=aladdin">new RegExp</a>,是VBScritp5.0提供的“正则表达式”对象(只要你的服务器 安装了IE5.x，就会带VBScript5.0)。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用test方法实现模糊查询</span></span><br><span class="line"><span class="comment">   * @param  &#123;Array&#125;  list     原数组</span></span><br><span class="line"><span class="comment">   * @param  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class="line"><span class="comment">   * @return &#123;Array&#125;           查询的结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">    var reg =  new RegExp(keyWord);</span><br><span class="line">    var arr = [];</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (reg.test(list[i])) &#123;</span><br><span class="line">        arr.push(list[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「木方佳学」的原创文章，遵循CC <span class="number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/weixin_43867847/article/details/118491381</span></span><br></pre></td></tr></table></figure><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用indexof方法实现模糊查询</span></span><br><span class="line"><span class="comment">   * @param  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class="line"><span class="comment">   * @param  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class="line"><span class="comment">   * @return &#123;Array&#125;           查询的结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">    var arr = [];</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (list[i].indexOf(keyWord) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        arr.push(list[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用spilt方法实现模糊查询</span></span><br><span class="line"><span class="comment">  * @param  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class="line"><span class="comment">  * @param  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class="line"><span class="comment">  * @return &#123;Array&#125;           查询的结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">   var arr = [];</span><br><span class="line">   <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (list[i].split(keyWord).length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">       arr.push(list[i]);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用match方法实现模糊查询</span></span><br><span class="line"><span class="comment">  * @param  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class="line"><span class="comment">  * @param  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class="line"><span class="comment">  * @return &#123;Array&#125;           查询的结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">   var arr = [];</span><br><span class="line">   <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (list[i].match(keyWord) != null) &#123;</span><br><span class="line">       arr.push(list[i]);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>————————————————<br>版权声明：本文为CSDN博主<a href="https://blog.csdn.net/weixin_43867847?type=blog">木方佳学</a>的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_43867847/article/details/118491381">https://blog.csdn.net/weixin_43867847/article/details/118491381</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 表格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts学习之路.....</title>
      <link href="/uncategorized/echarts/"/>
      <url>/uncategorized/echarts/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3>   <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> var option = &#123;</span><br><span class="line">title: &#123;            <span class="comment">//图表的标题</span></span><br><span class="line">text: <span class="string">&quot;vue成绩分析图&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">legend: &#123;           <span class="comment">//展现了不同系列的标记、颜色、名字</span></span><br><span class="line">data: [<span class="string">&quot;成绩&quot;</span>]</span><br><span class="line">&#125;,</span><br><span class="line">tooltip: &#123;&#125;,        <span class="comment">//提示框</span></span><br><span class="line">xAxis: &#123;            <span class="comment">//直角坐标系grid中的x轴</span></span><br><span class="line">data: [<span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>]</span><br><span class="line">&#125;,</span><br><span class="line">yAxis: &#123;&#125;,          <span class="comment">//直角坐标系grid中的y轴</span></span><br><span class="line">series: [&#123;          <span class="comment">//系列列表</span></span><br><span class="line">type: <span class="string">&quot;bar&quot;</span>,      <span class="comment">//决定自己的图表类型</span></span><br><span class="line">data: [<span class="string">&quot;80&quot;</span>, <span class="string">&quot;90&quot;</span>, <span class="string">&quot;70&quot;</span>, <span class="string">&quot;100&quot;</span>],</span><br><span class="line">name: <span class="string">&#x27;成绩&#x27;</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="更新option"><a href="#更新option" class="headerlink" title="更新option"></a>更新option</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echart.setOption(option);</span><br></pre></td></tr></table></figure><h3 id="特殊样式"><a href="#特殊样式" class="headerlink" title="特殊样式"></a>特殊样式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lineStyle:&#123;width:<span class="string">&quot;10px&quot;</span>,cap:<span class="string">&quot;rouned&quot;</span>&#125;</span><br><span class="line"><span class="comment">//10像素，端点平滑</span></span><br><span class="line">itemStyle:&#123;borderRadius:[<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>],&#125;</span><br><span class="line"><span class="comment">//圆角，左上，右上，右下，左下</span></span><br></pre></td></tr></table></figure><h2 id="柱状图-–-bar"><a href="#柱状图-–-bar" class="headerlink" title="柱状图 – bar"></a>柱状图 – bar</h2><h3 id="option-1"><a href="#option-1" class="headerlink" title="option"></a>option</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line">function a1() &#123;</span><br><span class="line">    var echar=echarts.init(document.getElementById(<span class="string">&quot;first&quot;</span>));</span><br><span class="line">    <span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line">    var option=&#123;</span><br><span class="line">        <span class="comment">//设置标题</span></span><br><span class="line">        title:&#123;</span><br><span class="line">          text:<span class="string">&quot;柱状图&quot;</span>，              <span class="comment">//主标题</span></span><br><span class="line">          textStyle:&#123;</span><br><span class="line">            color:<span class="string">&quot;#fff&quot;</span>              <span class="comment">//主标题内容样式</span></span><br><span class="line">          &#125;,</span><br><span class="line">          subtext:<span class="string">&#x27;柱状图哟柱状图&#x27;</span>,    <span class="comment">//副标题</span></span><br><span class="line">          subtextStyle:&#123;</span><br><span class="line">            color:<span class="string">&quot;#fff&quot;</span>              <span class="comment">//副标题内容样式</span></span><br><span class="line">          &#125;,</span><br><span class="line">          padding:[<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>]       <span class="comment">//标题位置,因为图形是放在一个dom中,因此用padding属性来定位</span></span><br><span class="line">          &#125;,</span><br><span class="line">        <span class="comment">//设置提示</span></span><br><span class="line">        tooltip:&#123;show:<span class="literal">true</span>&#125;,</span><br><span class="line">        <span class="comment">//设置图例</span></span><br><span class="line">        legend:&#123;</span><br><span class="line">          type:<span class="string">&#x27;plain&#x27;</span>,                <span class="comment">//类型,默认为&#x27;plain&#x27;,当图例很多时可使用&#x27;scroll&#x27;</span></span><br><span class="line">          top:<span class="string">&#x27;1%&#x27;</span>,                    <span class="comment">//相对容器位置,&#x27;top\bottom\left\right&#x27;</span></span><br><span class="line">          selected:&#123;</span><br><span class="line">            <span class="string">&#x27;销售&#x27;</span>:<span class="literal">true</span>,                <span class="comment">//选择,图形加载出来会显示选择的图例,默认为true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          textStyle:&#123;                   <span class="comment">//内容样式</span></span><br><span class="line">            color:<span class="string">&#x27;#fff&#x27;</span>,               <span class="comment">//所有图例的字体颜色</span></span><br><span class="line">            backgroundColor:<span class="string">&#x27;black&#x27;</span>,    <span class="comment">//所有图例的字体背景色</span></span><br><span class="line">          &#125;,</span><br><span class="line">          tooltip:&#123;                      <span class="comment">//图例提示框,默认不显示</span></span><br><span class="line">            show:<span class="literal">true</span>,</span><br><span class="line">            color:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          data:[                          <span class="comment">//图例内容</span></span><br><span class="line">            &#123;</span><br><span class="line">              name:<span class="string">&#x27;销售&#x27;</span>,</span><br><span class="line">              icon:<span class="string">&#x27;circle&#x27;</span>,               <span class="comment">//图例的外框样式</span></span><br><span class="line">              textStyle:&#123;</span><br><span class="line">                color:<span class="string">&#x27;#fff&#x27;</span>,               <span class="comment">//单独设置某一个图例的颜色</span></span><br><span class="line">                backgroundColor:<span class="string">&#x27;black&#x27;</span>     <span class="comment">//单独设置某一个图例的字体背景色</span></span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//提示框</span></span><br><span class="line">          oltip:&#123;</span><br><span class="line">            show:<span class="literal">true</span>,                      <span class="comment">// 是否显示提示框,默认为true</span></span><br><span class="line">            trigger:<span class="string">&#x27;item&#x27;</span>,                 <span class="comment">//数据项图形触发</span></span><br><span class="line">            axisPointer:&#123;                   <span class="comment">//指示样式</span></span><br><span class="line">              axis:<span class="string">&#x27;auto&#x27;</span></span><br><span class="line">              type:<span class="string">&#x27;shadow&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            padding:<span class="number">5</span>,</span><br><span class="line">            textStyle:&#123;                     <span class="comment">//提示框内容</span></span><br><span class="line">              color:<span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        <span class="comment">//grid区域</span></span><br><span class="line">        grid:&#123;</span><br><span class="line">            show:<span class="literal">false</span>,<span class="comment">//---是否显示直角坐标系网格</span></span><br><span class="line">            top:<span class="number">80</span>,<span class="comment">//---相对位置，top\bottom\left\right  </span></span><br><span class="line">            containLabel:<span class="literal">false</span>,<span class="comment">//---grid 区域是否包含坐标轴的刻度标签</span></span><br><span class="line">            tooltip:&#123;<span class="comment">//---鼠标焦点放在图形上，产生的提示框</span></span><br><span class="line">            show:<span class="literal">true</span>,</span><br><span class="line">            trigger:<span class="string">&#x27;item&#x27;</span>,<span class="comment">//---触发类型</span></span><br><span class="line">            textStyle:&#123;</span><br><span class="line">            color:<span class="string">&#x27;#666&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="comment">//设置坐标轴</span></span><br><span class="line">        xAxis: &#123;</span><br><span class="line">            show:<span class="literal">true</span>,<span class="comment">//---是否显示</span></span><br><span class="line">            position:<span class="string">&#x27;bottom&#x27;</span>,<span class="comment">//---x轴位置</span></span><br><span class="line">            offset:<span class="number">0</span>,<span class="comment">//---x轴相对于默认位置的偏移</span></span><br><span class="line">            type:<span class="string">&#x27;category&#x27;</span>,<span class="comment">//---轴类型，默认&#x27;category&#x27;</span></span><br><span class="line">            name:<span class="string">&#x27;月份&#x27;</span>,<span class="comment">//---轴名称</span></span><br><span class="line">            nameLocation:<span class="string">&#x27;end&#x27;</span>,<span class="comment">//---轴名称相对位置</span></span><br><span class="line">            nameTextStyle:&#123;<span class="comment">//---坐标轴名称样式</span></span><br><span class="line">            color:<span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">            padding:[<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-5</span>],<span class="comment">//---坐标轴名称相对位置</span></span><br><span class="line">            &#125;,</span><br><span class="line">            nameGap:<span class="number">15</span>,<span class="comment">//---坐标轴名称与轴线之间的距离</span></span><br><span class="line">            <span class="comment">//nameRotate:270,//---坐标轴名字旋转</span></span><br><span class="line">            </span><br><span class="line">            axisLine:&#123;<span class="comment">//---坐标轴 轴线</span></span><br><span class="line">            show:<span class="literal">true</span>,<span class="comment">//---是否显示</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//------------------- 箭头 -------------------------</span></span><br><span class="line">            symbol:[<span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;arrow&#x27;</span>],<span class="comment">//---是否显示轴线箭头</span></span><br><span class="line">            symbolSize:[<span class="number">8</span>, <span class="number">8</span>] ,<span class="comment">//---箭头大小</span></span><br><span class="line">            symbolOffset:[<span class="number">0</span>,<span class="number">7</span>],<span class="comment">//---箭头位置</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//------------------- 线 -------------------------</span></span><br><span class="line">            lineStyle:&#123;</span><br><span class="line">            color:<span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">            width:<span class="number">1</span>,</span><br><span class="line">            type:<span class="string">&#x27;solid&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            axisTick:&#123;<span class="comment">//---坐标轴 刻度</span></span><br><span class="line">            show:<span class="literal">true</span>,<span class="comment">//---是否显示</span></span><br><span class="line">            inside:<span class="literal">true</span>,<span class="comment">//---是否朝内</span></span><br><span class="line">            lengt:<span class="number">3</span>,<span class="comment">//---长度</span></span><br><span class="line">            lineStyle:&#123;</span><br><span class="line">            <span class="comment">//color:&#x27;red&#x27;,//---默认取轴线的颜色</span></span><br><span class="line">            width:<span class="number">1</span>,</span><br><span class="line">            type:<span class="string">&#x27;solid&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            axisLabel:&#123;<span class="comment">//---坐标轴 标签</span></span><br><span class="line">            show:<span class="literal">true</span>,<span class="comment">//---是否显示</span></span><br><span class="line">            inside:<span class="literal">false</span>,<span class="comment">//---是否朝内</span></span><br><span class="line">            rotate:<span class="number">0</span>,<span class="comment">//---旋转角度</span></span><br><span class="line">            margin: <span class="number">5</span>,<span class="comment">//---刻度标签与轴线之间的距离</span></span><br><span class="line">            <span class="comment">//color:&#x27;red&#x27;,//---默认取轴线的颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            splitLine:&#123;<span class="comment">//---grid 区域中的分隔线</span></span><br><span class="line">            show:<span class="literal">false</span>,<span class="comment">//---是否显示，&#x27;category&#x27;类目轴不显示，此时我的X轴为类目轴，splitLine属性是无意义的</span></span><br><span class="line">            lineStyle:&#123;</span><br><span class="line">            <span class="comment">//color:&#x27;red&#x27;,</span></span><br><span class="line">            <span class="comment">//width:1,</span></span><br><span class="line">            <span class="comment">//type:&#x27;solid&#x27;,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            splitArea:&#123;<span class="comment">//--网格区域</span></span><br><span class="line">            show:<span class="literal">false</span>,<span class="comment">//---是否显示，默认false</span></span><br><span class="line">            &#125;,           </span><br><span class="line">                data: [<span class="string">&quot;1月&quot;</span>,<span class="string">&quot;2月&quot;</span>,<span class="string">&quot;3月&quot;</span>,<span class="string">&quot;4月&quot;</span>,<span class="string">&quot;5月&quot;</span>,<span class="string">&quot;6月&quot;</span>,<span class="string">&quot;7月&quot;</span>,<span class="string">&quot;8月&quot;</span>,<span class="string">&quot;9月&quot;</span>,<span class="string">&quot;10月&quot;</span>,<span class="string">&quot;11月&quot;</span>,<span class="string">&quot;12月&quot;</span>],<span class="comment">//内容</span></span><br><span class="line">            &#125;,</span><br><span class="line">        yAxis: &#123;</span><br><span class="line">            show:<span class="literal">true</span>,<span class="comment">//---是否显示</span></span><br><span class="line">            position:<span class="string">&#x27;left&#x27;</span>,<span class="comment">//---y轴位置</span></span><br><span class="line">            offset:<span class="number">0</span>,<span class="comment">//---y轴相对于默认位置的偏移</span></span><br><span class="line">            type:<span class="string">&#x27;value&#x27;</span>,<span class="comment">//---轴类型，默认&#x27;category&#x27;</span></span><br><span class="line">            name:<span class="string">&#x27;销量&#x27;</span>,<span class="comment">//---轴名称</span></span><br><span class="line">            nameLocation:<span class="string">&#x27;end&#x27;</span>,<span class="comment">//---轴名称相对位置value</span></span><br><span class="line">            nameTextStyle:&#123;<span class="comment">//---坐标轴名称样式</span></span><br><span class="line">            color:<span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">            padding:[<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>],<span class="comment">//---坐标轴名称相对位置</span></span><br><span class="line">            &#125;,</span><br><span class="line">            nameGap:<span class="number">15</span>,<span class="comment">//---坐标轴名称与轴线之间的距离</span></span><br><span class="line">            <span class="comment">//nameRotate:270,//---坐标轴名字旋转</span></span><br><span class="line">            </span><br><span class="line">            axisLine:&#123;<span class="comment">//---坐标轴 轴线</span></span><br><span class="line">            show:<span class="literal">true</span>,<span class="comment">//---是否显示</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//------------------- 箭头 -------------------------</span></span><br><span class="line">            symbol:[<span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;arrow&#x27;</span>],<span class="comment">//---是否显示轴线箭头</span></span><br><span class="line">            symbolSize:[<span class="number">8</span>, <span class="number">8</span>] ,<span class="comment">//---箭头大小</span></span><br><span class="line">            symbolOffset:[<span class="number">0</span>,<span class="number">7</span>],<span class="comment">//---箭头位置</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//------------------- 线 -------------------------</span></span><br><span class="line">            lineStyle:&#123;</span><br><span class="line">            color:<span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">            width:<span class="number">1</span>,</span><br><span class="line">            type:<span class="string">&#x27;solid&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            axisTick:&#123;<span class="comment">//---坐标轴 刻度</span></span><br><span class="line">            show:<span class="literal">true</span>,<span class="comment">//---是否显示</span></span><br><span class="line">            inside:<span class="literal">true</span>,<span class="comment">//---是否朝内</span></span><br><span class="line">            lengt:<span class="number">3</span>,<span class="comment">//---长度</span></span><br><span class="line">            lineStyle:&#123;</span><br><span class="line">            <span class="comment">//color:&#x27;red&#x27;,//---默认取轴线的颜色</span></span><br><span class="line">            width:<span class="number">1</span>,</span><br><span class="line">            type:<span class="string">&#x27;solid&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            axisLabel:&#123;<span class="comment">//---坐标轴 标签</span></span><br><span class="line">            show:<span class="literal">true</span>,<span class="comment">//---是否显示</span></span><br><span class="line">            inside:<span class="literal">false</span>,<span class="comment">//---是否朝内</span></span><br><span class="line">            rotate:<span class="number">0</span>,<span class="comment">//---旋转角度</span></span><br><span class="line">            margin: <span class="number">8</span>,<span class="comment">//---刻度标签与轴线之间的距离</span></span><br><span class="line">            <span class="comment">//color:&#x27;red&#x27;,//---默认取轴线的颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            splitLine:&#123;<span class="comment">//---grid 区域中的分隔线</span></span><br><span class="line">            show:<span class="literal">true</span>,<span class="comment">//---是否显示，&#x27;category&#x27;类目轴不显示，此时我的y轴为类目轴，splitLine属性是有意义的</span></span><br><span class="line">            lineStyle:&#123;</span><br><span class="line">            color:<span class="string">&#x27;#666&#x27;</span>,</span><br><span class="line">            width:<span class="number">1</span>,</span><br><span class="line">            type:<span class="string">&#x27;dashed&#x27;</span>,<span class="comment">//---类型</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            splitArea:&#123;<span class="comment">//--网格区域</span></span><br><span class="line">            show:<span class="literal">false</span>,<span class="comment">//---是否显示，默认false</span></span><br><span class="line">            &#125;                        </span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="comment">//设置数据</span></span><br><span class="line">        series: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;销量&#x27;</span>,<span class="comment">//---系列名称</span></span><br><span class="line">                type: <span class="string">&#x27;bar&#x27;</span>,<span class="comment">//---类型</span></span><br><span class="line">                legendHoverLink:<span class="literal">true</span>,<span class="comment">//---是否启用图例 hover 时的联动高亮</span></span><br><span class="line">                label:&#123;<span class="comment">//---图形上的文本标签</span></span><br><span class="line">                show:<span class="literal">false</span>,</span><br><span class="line">                position:<span class="string">&#x27;insideTop&#x27;</span>,<span class="comment">//---相对位置</span></span><br><span class="line">                rotate:<span class="number">0</span>,<span class="comment">//---旋转角度</span></span><br><span class="line">                color:<span class="string">&#x27;#eee&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                itemStyle:&#123;<span class="comment">//---图形形状</span></span><br><span class="line">                color:<span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">                barBorderRadius:[<span class="number">18</span>,<span class="number">18</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                &#125;,</span><br><span class="line">                barWidth:<span class="string">&#x27;20&#x27;</span>,<span class="comment">//---柱形宽度</span></span><br><span class="line">                barCategoryGap:<span class="string">&#x27;20%&#x27;</span>,<span class="comment">//---柱形间距</span></span><br><span class="line">                data: [<span class="number">3020</span>, <span class="number">4800</span>, <span class="number">3600</span>, <span class="number">6050</span>, <span class="number">4320</span>, <span class="number">6200</span>,<span class="number">5050</span>,<span class="number">7200</span>,<span class="number">4521</span>,<span class="number">6700</span>,<span class="number">8000</span>,<span class="number">5020</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            ]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">    echar.setOption(option);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><div class="tag-plugin image"><div class="image-bg"><img src="./2018041500134284.png" fancybox="true"/><a class="image-download blur" style="opacity:0" href="./2018041500134284.png"><svg class="icon" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3734"><path d="M561.00682908 685.55838913a111.03077546 111.03077546 0 0 1-106.8895062 0L256.23182837 487.72885783a55.96309219 55.96309219 0 0 1 79.13181253-79.18777574L450.70357448 523.88101491V181.55477937a55.96309219 55.96309219 0 0 1 111.92618438 0v344.06109173l117.07478902-117.07478901a55.96309219 55.96309219 0 0 1 79.13181252 79.18777574zM282.81429711 797.1487951h447.70473912a55.96309219 55.96309219 0 0 1 0 111.92618438H282.81429711a55.96309219 55.96309219 0 0 1 0-111.92618438z" p-id="3735"></path></svg></a></div></div><h2 id="折线图-–-line"><a href="#折线图-–-line" class="headerlink" title="折线图 – line"></a>折线图 – line</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    <span class="comment">//设置线条的颜色，后面是个数组</span></span><br><span class="line">    color:[<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;gray&#x27;</span>],</span><br><span class="line">    <span class="comment">//设置图表标题</span></span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">&#x27;折线图堆叠1233标题&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//图表的提示框组件</span></span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        <span class="comment">//触发方式 - 坐标轴</span></span><br><span class="line">        trigger: <span class="string">&#x27;axis&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//图例组件</span></span><br><span class="line">    legend: &#123;</span><br><span class="line">        <span class="comment">//series有name了，这里的data可以删除掉</span></span><br><span class="line">        data: [<span class="string">&#x27;邮件营销&#x27;</span>, <span class="string">&#x27;联盟广告&#x27;</span>, <span class="string">&#x27;视频广告&#x27;</span>, <span class="string">&#x27;直接访问&#x27;</span>, <span class="string">&#x27;搜索引擎&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//网格配置 grid可以控制线形图 柱状图 图标大小</span></span><br><span class="line">    grid: &#123;</span><br><span class="line">        left: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">        right: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">        bottom: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">        <span class="comment">//是否显示刻度标签</span></span><br><span class="line">        containLabel: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//工具箱组件，可以另存为图片等功能</span></span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        feature: &#123;</span><br><span class="line">            saveAsImage: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置x轴的相关配置</span></span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        type: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">        <span class="comment">//线条和y轴是否有缝隙</span></span><br><span class="line">        boundaryGap: <span class="literal">false</span>,</span><br><span class="line">        data: [<span class="string">&#x27;周一&#x27;</span>, <span class="string">&#x27;周二&#x27;</span>, <span class="string">&#x27;周三&#x27;</span>, <span class="string">&#x27;周四&#x27;</span>, <span class="string">&#x27;周五&#x27;</span>, <span class="string">&#x27;周六&#x27;</span>, <span class="string">&#x27;周日&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置y轴的相关配置</span></span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        type: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//系列图表配置，决定显示那种类型的图表</span></span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;邮件营销&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="comment">//总量，后面的会堆叠前面的累加起来，删除掉就会折叠了，一般不需要</span></span><br><span class="line">            <span class="comment">//stack: &#x27;总量&#x27;,</span></span><br><span class="line">            data: [<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;联盟广告&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="comment">//stack: &#x27;总量&#x27;,</span></span><br><span class="line">            data: [<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;视频广告&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="comment">//stack: &#x27;总量&#x27;,</span></span><br><span class="line">            data: [<span class="number">150</span>, <span class="number">232</span>, <span class="number">201</span>, <span class="number">154</span>, <span class="number">190</span>, <span class="number">330</span>, <span class="number">410</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;直接访问&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="comment">//stack: &#x27;总量&#x27;,</span></span><br><span class="line">            data: [<span class="number">320</span>, <span class="number">332</span>, <span class="number">301</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">320</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;搜索引擎&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="comment">//stack: &#x27;总量&#x27;,</span></span><br><span class="line">            data: [<span class="number">520</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="平滑线-–-type-’line’-smooth-true"><a href="#平滑线-–-type-’line’-smooth-true" class="headerlink" title="平滑线 – type:’line’;smooth:true"></a>平滑线 – type:’line’;smooth:true</h2><h2 id="面-–-aresStyle-color-’-f00’"><a href="#面-–-aresStyle-color-’-f00’" class="headerlink" title="面     – aresStyle:{color:’#f00’}"></a>面     – aresStyle:{color:’#f00’}</h2><h2 id="饼形图-–-pie"><a href="#饼形图-–-pie" class="headerlink" title="饼形图 – pie"></a>饼形图 – pie</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 图表 </tag>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6数组方法</title>
      <link href="/uncategorized/arrayMethods/"/>
      <url>/uncategorized/arrayMethods/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><h3 id="1-扩展运算符"><a href="#1-扩展运算符" class="headerlink" title="1.扩展运算符"></a>1.扩展运算符</h3><p>扩展运算符(spread)是三个点(…)。将一个数组转为用逗号分隔的参数序列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> f(v, w, x, y, z) &#123;</span><br><span class="line">  <span class="built_in">return</span> v+w+x+y+z</span><br><span class="line"> &#125;</span><br><span class="line">const args = [0, 1];</span><br><span class="line">f(-1, ...args, 2, ...[3]); //5</span><br></pre></td></tr></table></figure><p>扩展运算符后面还能放置表达式 <mark class="tag-plugin mark" color="purple">如果扩展运算符后面是一个空数组，则不产生任何效果</mark></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> x=2</span><br><span class="line">const arr = [...(x &gt; 0 ? [<span class="string">&#x27;a&#x27;</span>] : []),<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">alert(arr) //a,b</span><br></pre></td></tr></table></figure><mark class="tag-plugin mark" color="orange">注意，只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错</mark><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 替代函数的apply()方法 </span><br><span class="line"> 由于扩展运算符可以展开数组,所以不需要apply()方法将数组转为函数的参数</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的写法                            // ES5 的写法</span></span><br><span class="line">Math.max.apply(null, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])        var arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">                                         var arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">                                         Array.prototype.push.apply(arr1, arr2);</span><br><span class="line"><span class="comment">// ES6 的写法                             // ES6 的写法    </span></span><br><span class="line">Math.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])                 let arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">                                         let arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 等同于                                 </span></span><br><span class="line">Math.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);                      arr1.push(...arr2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h4><h5 id="1-复制数组"><a href="#1-复制数组" class="headerlink" title="(1)复制数组"></a>(1)复制数组</h5><p>数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1;</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [2, 2]</span></span><br><span class="line"><span class="comment">//上面代码中，a2并不是a1的克隆，而是指向同一份数据的另一个指针。修改a2，会直接导致a1的变化(深拷贝)。</span></span><br></pre></td></tr></table></figure><p>ES5 只能用变通方法来复制数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1.concat();</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [1, 2]</span></span><br><span class="line">a2 <span class="comment">// [2, 2]</span></span><br><span class="line">a1 === a2 <span class="comment">//false</span></span><br><span class="line"><span class="comment">//上面代码中，a1会返回原数组的克隆，再修改a2就不会对a1产生影响(浅拷贝)。</span></span><br></pre></td></tr></table></figure><p>扩展运算符提供了复制数组的简便写法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br><span class="line"><span class="comment">//都是浅拷贝</span></span><br></pre></td></tr></table></figure><h5 id="2-合并数组"><a href="#2-合并数组" class="headerlink" title="(2)合并数组"></a>(2)合并数组</h5><p>扩展运算符提供了数组合并的新写法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的合并数组</span></span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line"><span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]  <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br><span class="line"><span class="comment">//不过，这两种方法都是浅拷贝，使用的时候需要注意。</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [&#123; foo: <span class="number">1</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> a2 = [&#123; bar: <span class="number">2</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a3 = a1.concat(a2);</span><br><span class="line"><span class="keyword">const</span> a4 = [...a1, ...a2];</span><br><span class="line"></span><br><span class="line">a3[<span class="number">0</span>] === a1[<span class="number">0</span>] <span class="comment">// true</span></span><br><span class="line">a4[<span class="number">0</span>] === a1[<span class="number">0</span>] <span class="comment">// true</span></span><br><span class="line"><span class="comment">//a3和a4是用两种不同方法合并而成的新数组，但是它们的成员都是对原数组成员的引用，这就是浅拷贝。如果修改了引用指向的值，会同步反映到新数组。</span></span><br></pre></td></tr></table></figure><h5 id="3-与解构赋值结合"><a href="#3-与解构赋值结合" class="headerlink" title="(3)与解构赋值结合"></a>(3)与解构赋值结合</h5><p>扩展运算符可以与解构赋值结合起来，用于生成数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">&quot;foo&quot;</span>];</span><br><span class="line">first  <span class="comment">// &quot;foo&quot;</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br><span class="line"><span class="keyword">const</span> [...butLast, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">//如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</span></span><br></pre></td></tr></table></figure><h5 id="4-字符串"><a href="#4-字符串" class="headerlink" title="(4)字符串"></a>(4)字符串</h5><p>扩展运算符还可以将字符串转为真正的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br><span class="line"><span class="comment">//凡是涉及到操作四个字节的 Unicode 字符的函数，都有这个问题。因此，最好都用扩展运算符改写</span></span><br><span class="line"></span><br><span class="line">let str = <span class="string">&#x27;x\uD83D\uDE80y&#x27;</span>;</span><br><span class="line">str.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;y\uDE80\uD83Dx&#x27;</span></span><br><span class="line">[...str].reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;y\uD83D\uDE80x&#x27;</span></span><br><span class="line"><span class="comment">//上面代码中，如果不用扩展运算符，字符串的reverse()操作就不正确。</span></span><br></pre></td></tr></table></figure><h5 id="5-实现Iterator-接口的对象"><a href="#5-实现Iterator-接口的对象" class="headerlink" title="(5)实现Iterator 接口的对象"></a>(5)实现Iterator 接口的对象</h5><p>任何定义了遍历器（Iterator）接口的对象（参阅 Iterator 一章），都可以用扩展运算符转为真正的数组.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let nodeList = document.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">let array = [...nodeList];</span><br><span class="line"><span class="comment">//上面代码中，querySelectorAll()方法返回的是一个NodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了 Iterator</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Number.prototype[Symbol.iterator] = function*() &#123;</span><br><span class="line">  let i = <span class="number">0</span>;</span><br><span class="line">  let num = <span class="variable language_">this</span>.valueOf();</span><br><span class="line">  <span class="keyword">while</span> (i &lt; num) &#123;</span><br><span class="line">    yield i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log([..<span class="number">.5</span>]) <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">//上面代码中，先定义了Number对象的遍历器接口，扩展运算符将5自动转成Number实例以后，就会调用这个接口，就会返回自定义的结果。</span></span><br></pre></td></tr></table></figure><h5 id="6-Map-和-Set-结构，Generator-函数"><a href="#6-Map-和-Set-结构，Generator-函数" class="headerlink" title="(6)Map 和 Set 结构，Generator 函数"></a>(6)Map 和 Set 结构，Generator 函数</h5><p>扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let map = new Map([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">let arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>Generator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = function*()&#123;</span><br><span class="line">  yield <span class="number">1</span>;</span><br><span class="line">  yield <span class="number">2</span>;</span><br><span class="line">  yield <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...go()] <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">//上面代码中，变量go是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。</span></span><br></pre></td></tr></table></figure><h3 id="2-Array-from"><a href="#2-Array-from" class="headerlink" title="2.Array.from"></a>2.Array.from</h3><p>Array.from()方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。<br>下面是一个类似数组的对象，Array.from()将它转为真正的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line">var arr1 = [].slice.call(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line">let arr2 = Array.from(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><p>实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的arguments对象。Array.from()都可以将它们转为真正的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NodeList 对象</span></span><br><span class="line">let ps = document.querySelectorAll(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">Array.from(ps).filter(p =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> p.textContent.length &gt; <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments 对象</span></span><br><span class="line">function foo() &#123;</span><br><span class="line">  var args = Array.from(arguments);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面代码中，querySelectorAll()方法返回的是一个类似数组的对象，可以将这个对象转为真正的数组，再使用filter()方法。</span></span><br></pre></td></tr></table></figure><p>只要是部署了 Iterator 接口的数据结构，Array.from()都能将其转为数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Array.from(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br><span class="line"></span><br><span class="line">let namesSet = new Set([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">Array.from(namesSet) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"><span class="comment">//上面代码中，字符串和 Set 结构都具有 Iterator 接口，因此可以被Array.from()转为真正的数组。</span></span><br><span class="line"><span class="comment">//如果参数是一个真正的数组，Array.from()会返回一个一模一样的新数组。</span></span><br><span class="line"><span class="comment">//值得提醒的是，扩展运算符（...）也可以将某些数据结构转为数组。</span></span><br></pre></td></tr></table></figure><p>Array.from()还可以接受一个函数作为第二个参数，作用类似于数组的map()方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Array.from(arrayLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">Array.from(arrayLike).map(x =&gt; x * x);</span><br><span class="line"></span><br><span class="line">Array.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure><p>如果map()函数里面用到了this关键字，还可以传入Array.from()的第三个参数，用来绑定this。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.from(&#123; length: <span class="number">2</span> &#125;, () =&gt; <span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="comment">// [&#x27;jack&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line"><span class="comment">//上面代码中，Array.from()的第一个参数指定了第二个参数运行的次数。这种特性可以让该方法的用法变得非常灵活。</span></span><br></pre></td></tr></table></figure><p>Array.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于\uFFFF的 Unicode 字符，算作两个字符的 bug。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function countSymbols(string) &#123;</span><br><span class="line">  <span class="keyword">return</span> Array.from(string).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Array-of"><a href="#3-Array-of" class="headerlink" title="3.Array.of()"></a>3.Array.of()</h3><p>Array.of()方法用于将一组值,转换为数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line">Array.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line">Array.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array() <span class="comment">// []</span></span><br><span class="line">Array(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br><span class="line">Array(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br><span class="line"><span class="comment">//上面代码中，Array()方法没有参数、一个参数、三个参数时，返回的结果都不一样。只有当参数个数不少于 2 个时，Array()才会返回由参数组成的新数组。参数只有一个正整数时，实际上是指定数组的长度。</span></span><br></pre></td></tr></table></figure><p>Array.of()基本上可以用来替代Array()或new Array()，并且不存在由于参数不同而导致的重载。它的行为非常统一</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array.of() <span class="comment">// []</span></span><br><span class="line">Array.of(undefined) <span class="comment">// [undefined]</span></span><br><span class="line">Array.of(<span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line">Array.of(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><mark class="tag-plugin mark" color="orange">Array.of()总是返回参数值组成的数组。如果没有参数，就返回一个空数组。</mark><h3 id="4-实例方法：copyWithin"><a href="#4-实例方法：copyWithin" class="headerlink" title="4.实例方法：copyWithin()"></a>4.实例方法：copyWithin()</h3><p>数组实例的copyWithin()方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会<emp>修改当前数组</emp>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.copyWithin(target, start = <span class="number">0</span>, end = <span class="variable language_">this</span>.length)</span><br><span class="line"><span class="comment">//target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</span></span><br><span class="line"><span class="comment">//start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。</span></span><br><span class="line"><span class="comment">//end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。 </span></span><br></pre></td></tr></table></figure><mark class="tag-plugin mark" color="orange">这三个参数都应该是数值，如果不是，会自动转为数值。</mark><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line"><span class="comment">//上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。</span></span><br></pre></td></tr></table></figure><p>还有其他</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -2相当于3号位，-1相当于4号位</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line">[].copyWithin.call(&#123;length: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span>&#125;, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将2号位到数组结束，复制到0号位</span></span><br><span class="line">let i32a = new Int32Array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">i32a.copyWithin(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于没有部署 TypedArray 的 copyWithin 方法的平台</span></span><br><span class="line"><span class="comment">// 需要采用下面的写法</span></span><br><span class="line">[].copyWithin.call(new Int32Array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// Int32Array [4, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="5-实例方法：find-findIndex-findLast-findLastIndex"><a href="#5-实例方法：find-findIndex-findLast-findLastIndex" class="headerlink" title="5.实例方法：find(),findIndex(),findLast(),findLastIndex()"></a>5.实例方法：find(),findIndex(),findLast(),findLastIndex()</h3><p>数组实例的find()方法，用于找出第一个符合条件的数组成员。它的参数是一个<emp>回调函数</emp>，所有数组成员依次执行该回调函数，直到找出第一个返回值为<u>true</u>的成员，然后返回该成员。如果没有符合条件的成员，则返回<u>undefined</u>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find((value, index, arr) =&gt; vlaue &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line"><span class="comment">//上面代码中，find()方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。</span></span><br></pre></td></tr></table></figure><p>数组实例的<sup class="tag-plugin sup" color="red">findIndex()</sup>方法的用法与find()方法非常类似，返回第一个符合条件的数组成员的<u>位置</u>，如果所有成员都不符合条件，则返回<u>-1</u>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(function(value, index, arr) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function f(v)&#123;</span><br><span class="line">  <span class="keyword">return</span> v &gt; <span class="variable language_">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">let person = &#123;name: <span class="string">&#x27;John&#x27;</span>, age: <span class="number">20</span>&#125;;</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">15</span>].find(f, person);    <span class="comment">// 26</span></span><br><span class="line"><span class="comment">//上面的代码中，find()函数接收了第二个参数person对象，回调函数中的this对象指向person对象。</span></span><br><span class="line"><span class="comment">//另外，这两个方法都可以发现NaN，弥补了数组的indexOf()方法的不足</span></span><br></pre></td></tr></table></figure><p>find()和findIndex()都是从数组的0号位，依次向后检查。ES2022 新增了两个方法<sup class="tag-plugin sup" >findLast()</sup>和<sup class="tag-plugin sup" >findLastIndex()</sup>，从数组的最后一个成员开始，依次向前检查，其他都保持不变。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [</span><br><span class="line">  &#123; value: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; value: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; value: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; value: <span class="number">4</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">array.findLast(n =&gt; n.value % <span class="number">2</span> === <span class="number">1</span>); <span class="comment">// &#123; value: 3 &#125;</span></span><br><span class="line">array.findLastIndex(n =&gt; n.value % <span class="number">2</span> === <span class="number">1</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="6-实例方法：fill"><a href="#6-实例方法：fill" class="headerlink" title="6.实例方法：fill()"></a>6.实例方法：fill()</h3><sup class="tag-plugin sup" >fill</sup>方法使用给定值，填充一个数组。<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line">new Array(<span class="number">3</span>).fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"><span class="comment">//上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br><span class="line"><span class="comment">//fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</span></span><br></pre></td></tr></table></figure><p>注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let arr = new Array(<span class="number">3</span>).fill(&#123;name: <span class="string">&quot;Mike&quot;</span>&#125;);</span><br><span class="line">arr[<span class="number">0</span>].name = <span class="string">&quot;Ben&quot;</span>;</span><br><span class="line">arr</span><br><span class="line"><span class="comment">// [&#123;name: &quot;Ben&quot;&#125;, &#123;name: &quot;Ben&quot;&#125;, &#123;name: &quot;Ben&quot;&#125;]</span></span><br><span class="line"></span><br><span class="line">let arr = new Array(<span class="number">3</span>).fill([]);</span><br><span class="line">arr[<span class="number">0</span>].push(<span class="number">5</span>);</span><br><span class="line">arr</span><br><span class="line"><span class="comment">// [[5], [5], [5]]</span></span><br></pre></td></tr></table></figure><h3 id="7-实例方法：entries-keys-values"><a href="#7-实例方法：entries-keys-values" class="headerlink" title="7.实例方法：entries(),keys(),values()"></a>7.实例方法：entries(),keys(),values()</h3><p>ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (let index of [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class="line">  console.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let elem of [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].values()) &#123;</span><br><span class="line">  console.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let [index, elem] of [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].entries()) &#123;</span><br><span class="line">  console.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure><p>如果不使用for…of循环，可以手动调用遍历器对象的next方法，进行遍历。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">let entries = letter.entries();</span><br><span class="line">console.log(entries.next().value); <span class="comment">// [0, &#x27;a&#x27;]</span></span><br><span class="line">console.log(entries.next().value); <span class="comment">// [1, &#x27;b&#x27;]</span></span><br><span class="line">console.log(entries.next().value); <span class="comment">// [2, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="8-实例方法-includes"><a href="#8-实例方法-includes" class="headerlink" title="8.实例方法:includes()"></a>8.实例方法:includes()</h3><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, NaN].includes(NaN) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>该方法的第二个参数表示搜索的起始位置 ，默认为0.如果第二个参数为负值,则表示倒数的位置,如果这时它大于数组长度(比如第二个参数为-4,但数组长度为3),则会重置为从0开始。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>没有该方法之前,我们通常使用数组的indexOf方法,检查是否包含某个值。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr.indexOf(el) !== <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>indexOf方法有两个缺点,一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符(&#x3D;&#x3D;&#x3D;)进行判断，这会导致对NaN的误判。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NaN].indexOf(NaN)  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>includes使用的是不一样的判断算法,就没有这个问题。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NaN].includes(NaN)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>下面代码用来检查当前环境是否支持该方法，如果不支持，部署一个简易的替代版本。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contains = (() =&gt;</span><br><span class="line">  Array.prototype.includes</span><br><span class="line">    ? (arr, value) =&gt; arr.includes(value)</span><br><span class="line">    : (arr, value) =&gt; arr.some(el =&gt; el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], <span class="string">&#x27;baz&#x27;</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>另外，Map和Set数据结构有一个has方法，需要注意与includes区分。<br>Map 结构的has方法，是用来查找键名的，比如Map.prototype.has(key)、WeakMap.prototype.has(key)、Reflect.has(target, propertyKey)。<br>Set 结构的has方法，是用来查找值的，比如Set.prototype.has(value)、WeakSet.prototype.has(value)。</p><h3 id="9-实例方法-flat-flatMap"><a href="#9-实例方法-flat-flatMap" class="headerlink" title="9.实例方法:flat(),flatMap()"></a>9.实例方法:flat(),flatMap()</h3><p>数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数组没有影响。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]].flat()  <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure> <p>上面代码自己中，原数组的成员里面有一个数组，flat()方法将子组件的成员取出来，添加在原来的位置。<br>flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]].flat()    <span class="comment">//[1,2,3,[4,5]]</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]].flat(<span class="number">2</span>)   <span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p>上面代码中，flat()的参数为2，表示要“拉平”两层的嵌套数组。<br>如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>]]].flat(Infinity)  <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><p>如果原数组有空位，flat()方法会跳过空位。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>, ,<span class="number">4</span>,<span class="number">5</span>].flat()          <span class="comment">//[1,2,4,5]</span></span><br></pre></td></tr></table></figure><p>flatMap()方法对原数组的每个成员执行一个函数(相当于执行Array.prototype.map()),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于[[2,40],[3,6],[4,8]].flat()</span></span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].flatMap((x)=&gt;[x,x*<span class="number">2</span>])  <span class="comment">//[2,4,3,6,4,8]</span></span><br></pre></td></tr></table></figure><p>flatMap()只能展开一层数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于[[[2]],[[4]]，[[6]],[[8]]].flat()</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].flatMap(x=&gt;[[x*<span class="number">2</span>]])   <span class="comment">//[[2],[4],[6],[8]]</span></span><br></pre></td></tr></table></figure><p>上面代码中，遍历函数返回的是一个双层的数组，但是默认只能展开一层，因此flatMap()返回的还是一个嵌套数组。<br>flatMap()方法的参数是一个遍历函数，该函数可以接受三个参数，分别是当前数组成员，当前数组成员位置(从零开始),原数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.flatMap(function callback(currentValue[,index[,array]])&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;[,thisArg])</span><br></pre></td></tr></table></figure><p>flatMap()方法还可以有第二个参数，用来绑定遍历函数里面的this。</p><h3 id="10-实例方法-at"><a href="#10-实例方法-at" class="headerlink" title="10.实例方法:at()"></a>10.实例方法:at()</h3><p>长久以来，JavaScript不支持数组的负索引，如果要引用数组的最后一个成员，不能写成arr[-1]，只能使用arr[arr.length - 1]。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
