<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js原生实现表格模糊查询.....</title>
      <link href="/2022/10/13/MoHuChaXun/"/>
      <url>/2022/10/13/MoHuChaXun/</url>
      
        <content type="html"><![CDATA[<p>遇到的一个功能总结一下，因为是原生的写法不常用，怕自己忘记在这里总结一下。有很多方法我用的是test<br>ps:因为不想整理,搬运自<a href="https://blog.csdn.net/weixin_43867847?type=blog">大佬</a>的文章</p><span id="more"></span><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>这里还用到了一个<a href="https://baike.baidu.com/item/RegExp/11017063?fr=aladdin">new RegExp</a>,是VBScritp5.0提供的“正则表达式”对象(只要你的服务器 安装了IE5.x，就会带VBScript5.0)。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用test方法实现模糊查询</span></span><br><span class="line"><span class="comment">   * @param  &#123;Array&#125;  list     原数组</span></span><br><span class="line"><span class="comment">   * @param  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class="line"><span class="comment">   * @return &#123;Array&#125;           查询的结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">    var reg =  new RegExp(keyWord);</span><br><span class="line">    var arr = [];</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (reg.test(list[i])) &#123;</span><br><span class="line">        arr.push(list[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「木方佳学」的原创文章，遵循CC <span class="number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/weixin_43867847/article/details/118491381</span></span><br></pre></td></tr></table></figure><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用indexof方法实现模糊查询</span></span><br><span class="line"><span class="comment">   * @param  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class="line"><span class="comment">   * @param  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class="line"><span class="comment">   * @return &#123;Array&#125;           查询的结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">    var arr = [];</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (list[i].indexOf(keyWord) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        arr.push(list[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用spilt方法实现模糊查询</span></span><br><span class="line"><span class="comment">  * @param  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class="line"><span class="comment">  * @param  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class="line"><span class="comment">  * @return &#123;Array&#125;           查询的结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">   var arr = [];</span><br><span class="line">   <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (list[i].split(keyWord).length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">       arr.push(list[i]);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 使用match方法实现模糊查询</span></span><br><span class="line"><span class="comment">  * @param  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class="line"><span class="comment">  * @param  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class="line"><span class="comment">  * @return &#123;Array&#125;           查询的结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> function fuzzyQuery(list, keyWord) &#123;</span><br><span class="line">   var arr = [];</span><br><span class="line">   <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (list[i].match(keyWord) != null) &#123;</span><br><span class="line">       arr.push(list[i]);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>————————————————<br>版权声明：本文为CSDN博主<a href="https://blog.csdn.net/weixin_43867847?type=blog">木方佳学</a>的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_43867847/article/details/118491381">https://blog.csdn.net/weixin_43867847/article/details/118491381</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 表格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts学习之路.....</title>
      <link href="/2022/10/13/echarts/"/>
      <url>/2022/10/13/echarts/</url>
      
        <content type="html"><![CDATA[<p>ps:反正就是把所有标签的属性都整理记录一下，我记忆力差没办法记住那么多，用的时候对照着改就行了。好想摆烂啊！！！！</p><span id="more"></span><h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3>   <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> var option = &#123;</span><br><span class="line">title: &#123;            <span class="comment">//图表的标题</span></span><br><span class="line">text: <span class="string">&quot;vue成绩分析图&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">legend: &#123;           <span class="comment">//展现了不同系列的标记、颜色、名字</span></span><br><span class="line">data: [<span class="string">&quot;成绩&quot;</span>]</span><br><span class="line">&#125;,</span><br><span class="line">tooltip: &#123;&#125;,        <span class="comment">//提示框</span></span><br><span class="line">xAxis: &#123;            <span class="comment">//直角坐标系grid中的y轴</span></span><br><span class="line">data: [<span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>]</span><br><span class="line">&#125;,</span><br><span class="line">yAxis: &#123;&#125;,          <span class="comment">//直角坐标系grid中的x轴</span></span><br><span class="line">series: [&#123;</span><br><span class="line">type: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">data: [<span class="string">&quot;80&quot;</span>, <span class="string">&quot;90&quot;</span>, <span class="string">&quot;70&quot;</span>, <span class="string">&quot;100&quot;</span>],</span><br><span class="line">name: <span class="string">&#x27;成绩&#x27;</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="更新option"><a href="#更新option" class="headerlink" title="更新option"></a>更新option</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echart.setOption(option);</span><br></pre></td></tr></table></figure><h2 id="柱状图-–-bar"><a href="#柱状图-–-bar" class="headerlink" title="柱状图 – bar"></a>柱状图 – bar</h2><h2 id="折线图-–-line"><a href="#折线图-–-line" class="headerlink" title="折线图 – line"></a>折线图 – line</h2><h2 id="平滑线-–-type-’line’-smooth-true"><a href="#平滑线-–-type-’line’-smooth-true" class="headerlink" title="平滑线 – type:’line’;smooth:true"></a>平滑线 – type:’line’;smooth:true</h2><h2 id="面-–-aresStyle-color-’-f00’"><a href="#面-–-aresStyle-color-’-f00’" class="headerlink" title="面     – aresStyle:{color:’#f00’}"></a>面     – aresStyle:{color:’#f00’}</h2><h2 id="饼形图-–-pie"><a href="#饼形图-–-pie" class="headerlink" title="饼形图 – pie"></a>饼形图 – pie</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 图表 </tag>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6数组方法</title>
      <link href="/2022/10/09/arrayMethods/"/>
      <url>/2022/10/09/arrayMethods/</url>
      
        <content type="html"><![CDATA[<p>这里的是es6新增的数组扩展,很多不常用的整理一下方便查找</p><span id="more"></span><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><h3 id="1-扩展运算符"><a href="#1-扩展运算符" class="headerlink" title="1.扩展运算符"></a>1.扩展运算符</h3><p>扩展运算符(spread)是三个点(…)。将一个数组转为用逗号分隔的参数序列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> f(v, w, x, y, z) &#123;</span><br><span class="line">  <span class="built_in">return</span> v+w+x+y+z</span><br><span class="line"> &#125;</span><br><span class="line">const args = [0, 1];</span><br><span class="line">f(-1, ...args, 2, ...[3]); //5</span><br></pre></td></tr></table></figure><p>扩展运算符后面还能放置表达式 <mark class="tag-plugin mark" color="purple">如果扩展运算符后面是一个空数组，则不产生任何效果</mark></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> x=2</span><br><span class="line">const arr = [...(x &gt; 0 ? [<span class="string">&#x27;a&#x27;</span>] : []),<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">alert(arr) //a,b</span><br></pre></td></tr></table></figure><mark class="tag-plugin mark" color="orange">注意，只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错</mark><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 替代函数的apply()方法 </span><br><span class="line"> 由于扩展运算符可以展开数组,所以不需要apply()方法将数组转为函数的参数</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的写法                            // ES5 的写法</span></span><br><span class="line">Math.max.apply(null, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])        var arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">                                         var arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">                                         Array.prototype.push.apply(arr1, arr2);</span><br><span class="line"><span class="comment">// ES6 的写法                             // ES6 的写法    </span></span><br><span class="line">Math.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])                 let arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">                                         let arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 等同于                                 </span></span><br><span class="line">Math.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);                      arr1.push(...arr2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h4><h5 id="1-复制数组"><a href="#1-复制数组" class="headerlink" title="(1)复制数组"></a>(1)复制数组</h5><p>数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1;</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [2, 2]</span></span><br><span class="line"><span class="comment">//上面代码中，a2并不是a1的克隆，而是指向同一份数据的另一个指针。修改a2，会直接导致a1的变化(深拷贝)。</span></span><br></pre></td></tr></table></figure><p>ES5 只能用变通方法来复制数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1.concat();</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [1, 2]</span></span><br><span class="line">a2 <span class="comment">// [2, 2]</span></span><br><span class="line">a1 === a2 <span class="comment">//false</span></span><br><span class="line"><span class="comment">//上面代码中，a1会返回原数组的克隆，再修改a2就不会对a1产生影响(浅拷贝)。</span></span><br></pre></td></tr></table></figure><p>扩展运算符提供了复制数组的简便写法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br><span class="line"><span class="comment">//都是浅拷贝</span></span><br></pre></td></tr></table></figure><h5 id="2-合并数组"><a href="#2-合并数组" class="headerlink" title="(2)合并数组"></a>(2)合并数组</h5><p>扩展运算符提供了数组合并的新写法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的合并数组</span></span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line"><span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]  <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br><span class="line"><span class="comment">//不过，这两种方法都是浅拷贝，使用的时候需要注意。</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [&#123; foo: <span class="number">1</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> a2 = [&#123; bar: <span class="number">2</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a3 = a1.concat(a2);</span><br><span class="line"><span class="keyword">const</span> a4 = [...a1, ...a2];</span><br><span class="line"></span><br><span class="line">a3[<span class="number">0</span>] === a1[<span class="number">0</span>] <span class="comment">// true</span></span><br><span class="line">a4[<span class="number">0</span>] === a1[<span class="number">0</span>] <span class="comment">// true</span></span><br><span class="line"><span class="comment">//a3和a4是用两种不同方法合并而成的新数组，但是它们的成员都是对原数组成员的引用，这就是浅拷贝。如果修改了引用指向的值，会同步反映到新数组。</span></span><br></pre></td></tr></table></figure><h5 id="3-与解构赋值结合"><a href="#3-与解构赋值结合" class="headerlink" title="(3)与解构赋值结合"></a>(3)与解构赋值结合</h5><p>扩展运算符可以与解构赋值结合起来，用于生成数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">&quot;foo&quot;</span>];</span><br><span class="line">first  <span class="comment">// &quot;foo&quot;</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br><span class="line"><span class="keyword">const</span> [...butLast, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">//如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</span></span><br></pre></td></tr></table></figure><h5 id="4-字符串"><a href="#4-字符串" class="headerlink" title="(4)字符串"></a>(4)字符串</h5><p>扩展运算符还可以将字符串转为真正的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span></span><br><span class="line"><span class="comment">//凡是涉及到操作四个字节的 Unicode 字符的函数，都有这个问题。因此，最好都用扩展运算符改写</span></span><br><span class="line"></span><br><span class="line">let str = <span class="string">&#x27;x\uD83D\uDE80y&#x27;</span>;</span><br><span class="line">str.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;y\uDE80\uD83Dx&#x27;</span></span><br><span class="line">[...str].reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;y\uD83D\uDE80x&#x27;</span></span><br><span class="line"><span class="comment">//上面代码中，如果不用扩展运算符，字符串的reverse()操作就不正确。</span></span><br></pre></td></tr></table></figure><h5 id="5-实现Iterator-接口的对象"><a href="#5-实现Iterator-接口的对象" class="headerlink" title="(5)实现Iterator 接口的对象"></a>(5)实现Iterator 接口的对象</h5><p>任何定义了遍历器（Iterator）接口的对象（参阅 Iterator 一章），都可以用扩展运算符转为真正的数组.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let nodeList = document.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">let array = [...nodeList];</span><br><span class="line"><span class="comment">//上面代码中，querySelectorAll()方法返回的是一个NodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了 Iterator</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Number.prototype[Symbol.iterator] = function*() &#123;</span><br><span class="line">  let i = <span class="number">0</span>;</span><br><span class="line">  let num = <span class="variable language_">this</span>.valueOf();</span><br><span class="line">  <span class="keyword">while</span> (i &lt; num) &#123;</span><br><span class="line">    yield i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log([..<span class="number">.5</span>]) <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">//上面代码中，先定义了Number对象的遍历器接口，扩展运算符将5自动转成Number实例以后，就会调用这个接口，就会返回自定义的结果。</span></span><br></pre></td></tr></table></figure><h5 id="6-Map-和-Set-结构，Generator-函数"><a href="#6-Map-和-Set-结构，Generator-函数" class="headerlink" title="(6)Map 和 Set 结构，Generator 函数"></a>(6)Map 和 Set 结构，Generator 函数</h5><p>扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let map = new Map([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">let arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>Generator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = function*()&#123;</span><br><span class="line">  yield <span class="number">1</span>;</span><br><span class="line">  yield <span class="number">2</span>;</span><br><span class="line">  yield <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...go()] <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">//上面代码中，变量go是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。</span></span><br></pre></td></tr></table></figure><h3 id="2-Array-from"><a href="#2-Array-from" class="headerlink" title="2.Array.from"></a>2.Array.from</h3><p>Array.from()方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。<br>下面是一个类似数组的对象，Array.from()将它转为真正的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line">var arr1 = [].slice.call(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line">let arr2 = Array.from(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><p>实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的arguments对象。Array.from()都可以将它们转为真正的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NodeList 对象</span></span><br><span class="line">let ps = document.querySelectorAll(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">Array.from(ps).filter(p =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> p.textContent.length &gt; <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments 对象</span></span><br><span class="line">function foo() &#123;</span><br><span class="line">  var args = Array.from(arguments);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面代码中，querySelectorAll()方法返回的是一个类似数组的对象，可以将这个对象转为真正的数组，再使用filter()方法。</span></span><br></pre></td></tr></table></figure><p>只要是部署了 Iterator 接口的数据结构，Array.from()都能将其转为数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Array.from(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br><span class="line"></span><br><span class="line">let namesSet = new Set([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">Array.from(namesSet) <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"><span class="comment">//上面代码中，字符串和 Set 结构都具有 Iterator 接口，因此可以被Array.from()转为真正的数组。</span></span><br><span class="line"><span class="comment">//如果参数是一个真正的数组，Array.from()会返回一个一模一样的新数组。</span></span><br><span class="line"><span class="comment">//值得提醒的是，扩展运算符（...）也可以将某些数据结构转为数组。</span></span><br></pre></td></tr></table></figure><p>Array.from()还可以接受一个函数作为第二个参数，作用类似于数组的map()方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Array.from(arrayLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">Array.from(arrayLike).map(x =&gt; x * x);</span><br><span class="line"></span><br><span class="line">Array.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure><p>如果map()函数里面用到了this关键字，还可以传入Array.from()的第三个参数，用来绑定this。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.from(&#123; length: <span class="number">2</span> &#125;, () =&gt; <span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="comment">// [&#x27;jack&#x27;, &#x27;jack&#x27;]</span></span><br><span class="line"><span class="comment">//上面代码中，Array.from()的第一个参数指定了第二个参数运行的次数。这种特性可以让该方法的用法变得非常灵活。</span></span><br></pre></td></tr></table></figure><p>Array.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于\uFFFF的 Unicode 字符，算作两个字符的 bug。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function countSymbols(string) &#123;</span><br><span class="line">  <span class="keyword">return</span> Array.from(string).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Array-of"><a href="#3-Array-of" class="headerlink" title="3.Array.of()"></a>3.Array.of()</h3><p>Array.of()方法用于将一组值,转换为数组。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line">Array.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line">Array.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array() <span class="comment">// []</span></span><br><span class="line">Array(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br><span class="line">Array(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br><span class="line"><span class="comment">//上面代码中，Array()方法没有参数、一个参数、三个参数时，返回的结果都不一样。只有当参数个数不少于 2 个时，Array()才会返回由参数组成的新数组。参数只有一个正整数时，实际上是指定数组的长度。</span></span><br></pre></td></tr></table></figure><p>Array.of()基本上可以用来替代Array()或new Array()，并且不存在由于参数不同而导致的重载。它的行为非常统一</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array.of() <span class="comment">// []</span></span><br><span class="line">Array.of(undefined) <span class="comment">// [undefined]</span></span><br><span class="line">Array.of(<span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line">Array.of(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><mark class="tag-plugin mark" color="orange">Array.of()总是返回参数值组成的数组。如果没有参数，就返回一个空数组。</mark><h3 id="4-实例方法：copyWithin"><a href="#4-实例方法：copyWithin" class="headerlink" title="4.实例方法：copyWithin()"></a>4.实例方法：copyWithin()</h3><p>数组实例的copyWithin()方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会<emp>修改当前数组</emp>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.copyWithin(target, start = <span class="number">0</span>, end = <span class="variable language_">this</span>.length)</span><br><span class="line"><span class="comment">//target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</span></span><br><span class="line"><span class="comment">//start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。</span></span><br><span class="line"><span class="comment">//end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。 </span></span><br></pre></td></tr></table></figure><mark class="tag-plugin mark" color="orange">这三个参数都应该是数值，如果不是，会自动转为数值。</mark><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line"><span class="comment">//上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。</span></span><br></pre></td></tr></table></figure><p>还有其他</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -2相当于3号位，-1相当于4号位</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line">[].copyWithin.call(&#123;length: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span>&#125;, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将2号位到数组结束，复制到0号位</span></span><br><span class="line">let i32a = new Int32Array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">i32a.copyWithin(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于没有部署 TypedArray 的 copyWithin 方法的平台</span></span><br><span class="line"><span class="comment">// 需要采用下面的写法</span></span><br><span class="line">[].copyWithin.call(new Int32Array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// Int32Array [4, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="5-实例方法：find-findIndex-findLast-findLastIndex"><a href="#5-实例方法：find-findIndex-findLast-findLastIndex" class="headerlink" title="5.实例方法：find(),findIndex(),findLast(),findLastIndex()"></a>5.实例方法：find(),findIndex(),findLast(),findLastIndex()</h3><p>数组实例的find()方法，用于找出第一个符合条件的数组成员。它的参数是一个<emp>回调函数</emp>，所有数组成员依次执行该回调函数，直到找出第一个返回值为<u>true</u>的成员，然后返回该成员。如果没有符合条件的成员，则返回<u>undefined</u>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find((value, index, arr) =&gt; vlaue &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line"><span class="comment">//上面代码中，find()方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。</span></span><br></pre></td></tr></table></figure><p>数组实例的<sup class="tag-plugin sup" color="red">findIndex()</sup>方法的用法与find()方法非常类似，返回第一个符合条件的数组成员的<u>位置</u>，如果所有成员都不符合条件，则返回<u>-1</u>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(function(value, index, arr) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function f(v)&#123;</span><br><span class="line">  <span class="keyword">return</span> v &gt; <span class="variable language_">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">let person = &#123;name: <span class="string">&#x27;John&#x27;</span>, age: <span class="number">20</span>&#125;;</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">15</span>].find(f, person);    <span class="comment">// 26</span></span><br><span class="line"><span class="comment">//上面的代码中，find()函数接收了第二个参数person对象，回调函数中的this对象指向person对象。</span></span><br><span class="line"><span class="comment">//另外，这两个方法都可以发现NaN，弥补了数组的indexOf()方法的不足</span></span><br></pre></td></tr></table></figure><p>find()和findIndex()都是从数组的0号位，依次向后检查。ES2022 新增了两个方法<sup class="tag-plugin sup" >findLast()</sup>和<sup class="tag-plugin sup" >findLastIndex()</sup>，从数组的最后一个成员开始，依次向前检查，其他都保持不变。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [</span><br><span class="line">  &#123; value: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; value: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; value: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; value: <span class="number">4</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">array.findLast(n =&gt; n.value % <span class="number">2</span> === <span class="number">1</span>); <span class="comment">// &#123; value: 3 &#125;</span></span><br><span class="line">array.findLastIndex(n =&gt; n.value % <span class="number">2</span> === <span class="number">1</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="6-实例方法：fill"><a href="#6-实例方法：fill" class="headerlink" title="6.实例方法：fill()"></a>6.实例方法：fill()</h3><sup class="tag-plugin sup" >fill</sup>方法使用给定值，填充一个数组。<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line">new Array(<span class="number">3</span>).fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"><span class="comment">//上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span></span><br><span class="line"><span class="comment">//fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</span></span><br></pre></td></tr></table></figure><p>注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let arr = new Array(<span class="number">3</span>).fill(&#123;name: <span class="string">&quot;Mike&quot;</span>&#125;);</span><br><span class="line">arr[<span class="number">0</span>].name = <span class="string">&quot;Ben&quot;</span>;</span><br><span class="line">arr</span><br><span class="line"><span class="comment">// [&#123;name: &quot;Ben&quot;&#125;, &#123;name: &quot;Ben&quot;&#125;, &#123;name: &quot;Ben&quot;&#125;]</span></span><br><span class="line"></span><br><span class="line">let arr = new Array(<span class="number">3</span>).fill([]);</span><br><span class="line">arr[<span class="number">0</span>].push(<span class="number">5</span>);</span><br><span class="line">arr</span><br><span class="line"><span class="comment">// [[5], [5], [5]]</span></span><br></pre></td></tr></table></figure><h3 id="7-实例方法：entries-keys-values"><a href="#7-实例方法：entries-keys-values" class="headerlink" title="7.实例方法：entries(),keys(),values()"></a>7.实例方法：entries(),keys(),values()</h3><p>ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (let index of [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class="line">  console.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let elem of [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].values()) &#123;</span><br><span class="line">  console.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (let [index, elem] of [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].entries()) &#123;</span><br><span class="line">  console.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure><p>如果不使用for…of循环，可以手动调用遍历器对象的next方法，进行遍历。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let letter = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">let entries = letter.entries();</span><br><span class="line">console.log(entries.next().value); <span class="comment">// [0, &#x27;a&#x27;]</span></span><br><span class="line">console.log(entries.next().value); <span class="comment">// [1, &#x27;b&#x27;]</span></span><br><span class="line">console.log(entries.next().value); <span class="comment">// [2, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
